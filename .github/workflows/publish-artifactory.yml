#
# Copyright (c) 2022, 2025 ZettaScale Technolgies.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh team, <zenoh@zettascale.tech>
#
name: Publish Artifactory
on:
  workflow_dispatch:
    inputs:
      dryrun:
        default: true
        type: boolean
env:
  CARGO_REGISTRIES_ARTIFACTORY_TOKEN: ${{ secrets.CARGO_REGISTRIES_ARTIFACTORY_TOKEN}}
  CARGO_REGISTRIES_ARTIFACTORY_INDEX: ${{ secrets.CARGO_REGISTRIES_ARTIFACTORY_INDEX }}
  CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS: "cargo:token"

jobs:
  build:

    name: Build on ${{ matrix.os }}
    runs-on: ["ubuntu-runner-set"]
    strategy:
      fail-fast: true

    steps:
    - uses: actions/checkout@v2

    - name: Install toml-cli2
      uses: taiki-e/cache-cargo-install-action@v2
      with:
        tool: toml-cli2
      env:
        CARGO_REGISTRY_DEFAULT: "crates-io"

    - uses: actions/setup-go@v5
      with:
        go-version: 1.24.1

    - name: Install yj
      run: go install github.com/sclevine/yj/v5@v5.1.0

    - name: Install Rust toolchain
    # NOTE: Showing the active Rust toolchain (defined by the rust-toolchain.toml file)
    # will have the side effect of installing it; if it's not installed already.
      run: |
        rustup toolchain uninstall $(toml get rust-toolchain.toml toolchain.channel -r)
        rustup toolchain install $(toml get rust-toolchain.toml toolchain.channel -r)
        rustup component add rustfmt clippy

    - name: Update Dependencies
      run: |
        toml get Cargo.toml . | jq '.workspace.dependencies |= with_entries(if .key | test("zenoh.*|zrpc.*") then .value += {registry: "artifactory"} else . end)' | yj -yt > Cargo.toml.tmp
        mv Cargo.toml.tmp Cargo.toml

    - name: Code format check
      run: cargo fmt --check

    - name: Clippy
      run: cargo clippy --all-targets -- -D warnings

    - name: Build
      run: cargo build --verbose --all-targets

    - name: Run tests
      run: cargo test --verbose --release

    - name: Cargo check
      run: |
        cargo check -p zrpc
        cargo check -p zrpc-derive

    - name: Publish
      if: ${{ !inputs.dryrun }}
      run: |
        cargo publish -p zrpc --registry artifactory --allow-dirty
        sleep 10
        cargo publish -p zrpc-derive --registry artifactory --allow-dirty